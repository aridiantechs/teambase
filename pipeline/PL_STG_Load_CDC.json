{
	"name": "PL_STG_Load_CDC",
	"properties": {
		"activities": [
			{
				"name": "Lookup1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT * FROM stg.etlControl",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_MetadataTable",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup1').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@concat(\n    'SELECT * FROM [',\n    item().TableName,\n    '] WHERE CreatedOn > ''',\n    item().LastLoadTime,\n    ''' OR UpdatedOn > ''',\n    item().LastLoadTime,\n    ''''\n)\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_OnPremSQLTable",
									"type": "DatasetReference",
									"parameters": {
										"tableName": {
											"value": "@item().TableName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_AzureSQLTable",
									"type": "DatasetReference",
									"parameters": {
										"tableName": {
											"value": "@item().TableName",
											"type": "Expression"
										},
										"SchemaName": "stg"
									}
								}
							]
						},
						{
							"name": "Script1",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Copy data1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "LS_AzureSQLDB",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "UPDATE stg.etlControl\nSET LastLoadTime = GETUTCDATE()\nWHERE TableName = '@{item().TableName}'\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "Load Sp",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"storedProcedureParameters": {
							"DefaultCurrencyId": {
								"type": "Int32",
								"value": "1"
							},
							"LanguageId": {
								"type": "Int32",
								"value": "1"
							},
							"UserId": {
								"type": "Int32",
								"value": "1"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": "IF OBJECT_ID('stg.spPolicy', 'U') IS NOT NULL\n    TRUNCATE TABLE stg.TransactionSLA;\n",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "ClientName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ClientName",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "EGlobalCode",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "EGlobalCode",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Country",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Country",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "CategoryName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CategoryName",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PolicyId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "PolicyId",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "PolicyName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PolicyName",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PolicyNumber",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PolicyNumber",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PolicyTypeId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "PolicyTypeId",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Carrier",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Carrier",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PlanId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "PlanId",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Product",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Product",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Premium",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 4,
									"precision": 19
								},
								"sink": {
									"name": "Premium",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 4,
									"precision": 19
								}
							},
							{
								"source": {
									"name": "Commission",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 7,
									"precision": 38
								},
								"sink": {
									"name": "Commission",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 7,
									"precision": 38
								}
							},
							{
								"source": {
									"name": "Fee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 14,
									"precision": 28
								},
								"sink": {
									"name": "Fee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 14,
									"precision": 28
								}
							},
							{
								"source": {
									"name": "ClientFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 38
								},
								"sink": {
									"name": "ClientFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 38
								}
							},
							{
								"source": {
									"name": "MembersCount",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "MembersCount",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "ActiveMembers",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "ActiveMembers",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "ActiveEmployes",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "ActiveEmployes",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "DeletedEmployes",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "DeletedEmployes",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "TotalBasmahFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 18
								},
								"sink": {
									"name": "TotalBasmahFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 18
								}
							},
							{
								"source": {
									"name": "ClientSince",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "ClientSince",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "CarrierBasmahFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 2,
									"precision": 20
								},
								"sink": {
									"name": "CarrierBasmahFee",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 2,
									"precision": 20
								}
							},
							{
								"source": {
									"name": "PolicyStartDate",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "PolicyStartDate",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "PolicyEndDate",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "PolicyEndDate",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "CommissionPercent",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 2,
									"precision": 6
								},
								"sink": {
									"name": "CommissionPercent",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 2,
									"precision": 6
								}
							},
							{
								"source": {
									"name": "BaseCurrency",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "BaseCurrency",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "BaseCurrencyName",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "BaseCurrencyName",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "MainAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "MainAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "SecondaryAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SecondaryAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "TertiaryAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "TertiaryAccountManager",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "PolcyStateTypeId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "PolcyStateTypeId",
									"type": "Int32",
									"physicalType": "int"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_SP_OnPremSQL",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_AzureSQLTable",
						"type": "DatasetReference",
						"parameters": {
							"tableName": "spPolicy",
							"SchemaName": "stg"
						}
					}
				]
			},
			{
				"name": "Transaction SLA",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Load Sp",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "DECLARE \n    @responsibleSysRole   INT         = NULL,        -- pass in the user’s role or NULL\n    @todaysDate           DATETIME    = GETUTCDATE(),   -- or pass in your “today’s Date”\n    @DefaultFirstFollowUp INT = (SELECT TOP 1 SlaFirstFollowUp FROM ApplicationSettings),\n    @DefaultSecondFollowUp INT = (SELECT TOP 1 SlaSecondFollowUp FROM ApplicationSettings),       \n    @HRRoleValue          INT         = 2,           \n    @BrokerRoleValue      INT         = 3;     \n\nSELECT\n    wf.WorkflowId,\n    wf.SubmittedOn,\n    wf.CompletedOn,\n    COALESCE(psla.FirstFollowUp,\n             csla.FirstFollowUp,\n             @DefaultFirstFollowUp)   AS SLAFirstFollowUp,\n    COALESCE(psla.SecondFollowUp,\n             csla.SecondFollowUp,\n             @DefaultSecondFollowUp)  AS SLASecondFollowUp,\n    dbo.GetLastResubmissionTat(\n        wf.CompletedOn,\n        wf.UpdatedOn,\n        client.OfficeLocationId,\n        wf.WorkflowTypeId,\n        wf.WorkflowStatusId,\n        wf.LastResubmissionTAT,\n        wf.LastResubmissionDate,\n        wf.TAT,\n        @todaysDate\n    )                      AS Tat,\n    wf.WorkflowStatusId,\n    wf.WorkflowTypeId,\n    wf.PendingActionRoleId,\n CASE \n  WHEN dbo.GetLastResubmissionTat(\n     wf.CompletedOn, wf.UpdatedOn, client.OfficeLocationId,\n     wf.WorkflowTypeId, wf.WorkflowStatusId,\n     wf.LastResubmissionTAT, wf.LastResubmissionDate,\n     wf.TAT, @todaysDate\n    ) > COALESCE(psla.FirstFollowUp, csla.FirstFollowUp, @DefaultFirstFollowUp)\n  THEN \n   CASE WHEN\n    dbo.GetLastResubmissionTat(\n     wf.CompletedOn, wf.UpdatedOn, client.OfficeLocationId,\n     wf.WorkflowTypeId, wf.WorkflowStatusId,\n     wf.LastResubmissionTAT, wf.LastResubmissionDate,\n     wf.TAT, @todaysDate\n    ) > COALESCE(psla.SecondFollowUp, csla.SecondFollowUp, @DefaultSecondFollowUp) \n    THEN 'Red'\n    ELSE 'Yellow'\n    END\n  ELSE 'Green'\n END AS SLAColor,\n CASE \n  WHEN dbo.GetLastResubmissionTat(\n     wf.CompletedOn, wf.UpdatedOn, client.OfficeLocationId,\n     wf.WorkflowTypeId, wf.WorkflowStatusId,\n     wf.LastResubmissionTAT, wf.LastResubmissionDate,\n     wf.TAT, @todaysDate\n    ) > COALESCE(psla.SecondFollowUp, csla.SecondFollowUp, @DefaultSecondFollowUp)\n  THEN 0  \n  ELSE 1\n END AS IsTransactionSLA\nFROM dbo.Policy AS policy\nINNER JOIN dbo.PolicyCategory      AS policyCategory\n    ON policy.PolicyId = policyCategory.PolicyId\n   AND policyCategory.IsDeleted = 0\nINNER JOIN dbo.MemberPolicyCategory AS memberPolicyCategory\n    ON policyCategory.PolicyCategoryId = memberPolicyCategory.PolicyCategoryId\nINNER JOIN dbo.Category            AS category\n    ON policyCategory.CategoryId = category.CategoryId\n   AND category.IsDeleted = 0\nINNER JOIN dbo.Member               AS member\n    ON memberPolicyCategory.MemberId = member.MemberId\n   AND member.IsDeleted = 0\nINNER JOIN dbo.WorkflowMember    AS workflowMember\n    ON memberPolicyCategory.MemberPolicyCategoryId = workflowMember.MemberPolicyCategoryId\nINNER JOIN dbo.Workflow             AS wf\n    ON workflowMember.WorkflowId = wf.WorkflowId\n   AND wf.IsCompleted = 0\nLEFT JOIN dbo.PolicySLA             AS psla\n    ON psla.PolicyId = policy.PolicyId\n   AND psla.SLAProcessTypeId = wf.WorkflowTypeId\nLEFT JOIN dbo.CarrierSLA            AS csla\n    ON csla.CarrierId = policy.CarrierId\n   AND csla.SLAProcessTypeId = wf.WorkflowTypeId\nINNER JOIN dbo.Client               AS client\n    ON policy.ClientId = client.ClientId\nWHERE\n    policy.IsDeleted = 0\n    AND (\n         dbo.IsBluePendingTask(wf.WorkflowTypeId, wf.WorkflowStatusId) = 1\n      OR @responsibleSysRole IS NULL\n      OR (\n           @responsibleSysRole IS NOT NULL\n       AND wf.PendingActionRoleId IS NOT NULL\n       AND (\n             (\n               @responsibleSysRole = @HRRoleValue\n           AND (wf.PendingActionRoleId = @HRRoleValue\n             OR wf.PendingActionRoleId = @BrokerRoleValue)\n             )\n           OR wf.PendingActionRoleId = @responsibleSysRole\n          )\n      )\n    )\n\tORDER By WorkflowId;\n\n ",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": "IF OBJECT_ID('dbo.TransactionSLA', 'U') IS NOT NULL\n    TRUNCATE TABLE dbo.TransactionSLA;\n",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_SP_OnPremSQL",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_AzureSQLTable",
						"type": "DatasetReference",
						"parameters": {
							"tableName": "TransactionSLA",
							"SchemaName": "dbo"
						}
					}
				]
			},
			{
				"name": "Claim SLA",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Transaction SLA",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "DECLARE \n    @DefaultFirstFollowUp INT = (SELECT TOP 1 SlaFirstFollowUp FROM ApplicationSettings),\n    @DefaultSecondFollowUp INT = (SELECT TOP 1 SlaSecondFollowUp FROM ApplicationSettings),\n    @DefaultBrokerReviewFollowUp INT = (SELECT TOP 1 SlaBrokerReviewFollowUp FROM ApplicationSettings), \n    @TodayDate DATETIME = GETUTCDATE();\n\nSELECT \n    mc.MedicalClaimId,\n    mc.DateReceived,\n    \n    COALESCE(settlpsla.FirstFollowUp, settlcsla.FirstFollowUp, @DefaultFirstFollowUp) AS SettlementSlaFirstFollowUp,\n    COALESCE(settlpsla.SecondFollowUp, settlcsla.SecondFollowUp, @DefaultSecondFollowUp) AS SettlementSlaSecondFollowUp,\n    dbo.GetTat(\n        ISNULL(mc.ResubmissionDate, mc.DateSubmitted),\n        mc.SettlementDate,\n        c.ClientId \n    ) AS SettlementTat,\n\n    COALESCE(evalpsla.FirstFollowUp, evalcsla.FirstFollowUp, @DefaultFirstFollowUp) AS EvaluationSlaFirstFollowUp,\n    COALESCE(evalpsla.SecondFollowUp, evalcsla.SecondFollowUp, @DefaultSecondFollowUp) AS EvaluationSlaSecondFollowUp,\n    dbo.GetTat(\n        ISNULL(mc.ResubmissionDate, mc.DateSubmitted),\n        mc.EvaluationDate,\n        c.ClientId\n    ) AS EvaluationTat,\n\n    COALESCE(brpsla.FirstFollowUp, brcsla.FirstFollowUp, @DefaultBrokerReviewFollowUp) AS BrokerReviewSlaFirstFollowUp,\n    COALESCE(brpsla.SecondFollowUp, brcsla.SecondFollowUp, @DefaultBrokerReviewFollowUp) AS BrokerReviewSlaSecondFollowUp,\n    dbo.GetTat(\n        ISNULL(mc.ResubmissionDate, mc.DateSubmitted),\n        mc.BrokerReviewDate,\n        c.ClientId\n    ) AS BrokerReviewTat,\n    ISNULL(mc.IsOriginalsAwaited, 0) AS OriginalsAwaited,\n    mc.DateClosed,\n    CASE\n        WHEN dbo.GetTat(ISNULL(mc.ResubmissionDate, mc.DateSubmitted), mc.SettlementDate, c.ClientId) > COALESCE(settlpsla.FirstFollowUp, settlcsla.FirstFollowUp, @DefaultFirstFollowUp)\n        THEN CASE\n            WHEN dbo.GetTat(ISNULL(mc.ResubmissionDate, mc.DateSubmitted), mc.SettlementDate, c.ClientId) > COALESCE(settlpsla.SecondFollowUp, settlcsla.SecondFollowUp, @DefaultSecondFollowUp)\n                THEN 'Red'\n            ELSE 'Yellow'\n        END\n        ELSE 'Green'\n    END AS SLAColor,\n\n    CASE\n        WHEN dbo.GetTat(ISNULL(mc.ResubmissionDate, mc.DateSubmitted), mc.SettlementDate, c.ClientId) > COALESCE(settlpsla.SecondFollowUp, settlcsla.SecondFollowUp, @DefaultSecondFollowUp)\n            THEN 0\n        ELSE 1\n    END AS IsTransactionSLA\nFROM dbo.MemberPolicyCategory mpc\nINNER JOIN dbo.PolicyCategory pc ON mpc.PolicyCategoryId = pc.PolicyCategoryId\nINNER JOIN dbo.Category cat ON pc.CategoryId = cat.CategoryId\nINNER JOIN dbo.Policy p ON pc.PolicyId = p.PolicyId\nINNER JOIN dbo.MedicalClaim mc ON mpc.MemberPolicyCategoryId = mc.MemberPolicyCategoryId\nINNER JOIN dbo.WorkflowMedicalClaim wm ON mc.MedicalClaimId = wm.MedicalClaimId\nINNER JOIN dbo.Carrier cr ON p.CarrierId = cr.CarrierId\nINNER JOIN dbo.Client c ON p.ClientId = c.ClientId\nLEFT JOIN dbo.CarrierSLA settlcsla ON cr.CarrierId = settlcsla.CarrierId AND settlcsla.SLAProcessTypeId = 1  -- 1 = MedicalClaimSettlementSla\nLEFT JOIN dbo.PolicySLA settlpsla ON p.PolicyId = settlpsla.PolicyId AND settlpsla.SLAProcessTypeId = 1\nLEFT JOIN dbo.CarrierSLA evalcsla ON cr.CarrierId = evalcsla.CarrierId AND evalcsla.SLAProcessTypeId = 2  -- 2 = MedicalClaimEvaluationSla\nLEFT JOIN dbo.PolicySLA evalpsla ON p.PolicyId = evalpsla.PolicyId AND evalpsla.SLAProcessTypeId = 2\nLEFT JOIN dbo.CarrierSLA brcsla ON cr.CarrierId = brcsla.CarrierId AND brcsla.SLAProcessTypeId = 3  -- 3 = MedicalClaimBrokerReviewSla\nLEFT JOIN dbo.PolicySLA brpsla ON p.PolicyId = brpsla.PolicyId AND brpsla.SLAProcessTypeId = 3\nLEFT JOIN Workflow w ON wm.WorkflowId = w.WorkflowId\nWHERE mc.DateClosed IS NULL\nAND mc.IsDeleted = 0; ",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": "IF OBJECT_ID('dbo.ClaimSLA', 'U') IS NOT NULL\n    TRUNCATE TABLE dbo.ClaimSLA;\n",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_SP_OnPremSQL",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_AzureSQLTable",
						"type": "DatasetReference",
						"parameters": {
							"tableName": "ClaimSLA",
							"SchemaName": "dbo"
						}
					}
				]
			}
		],
		"annotations": [],
		"lastPublishTime": "2025-04-15T09:35:00Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}